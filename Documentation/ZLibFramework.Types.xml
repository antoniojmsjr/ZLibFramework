<?xml version="1.0" encoding="utf-8"?>
<namespace name="ZLibFramework.Types" platform="Win64">
  <const name="None" type="TZLibCompressionLevelType">
    <value>
      None
    </value>
  </const>
  <const name="Fastest" type="TZLibCompressionLevelType">
    <value>
      Fastest
    </value>
  </const>
  <const name="Default" type="TZLibCompressionLevelType">
    <value>
      Default
    </value>
  </const>
  <const name="Max" type="TZLibCompressionLevelType">
    <value>
      Max
    </value>
  </const>
  <const name="Base64" type="TZLibModeType">
    <value>
      Base64
    </value>
  </const>
  <const name="Data" type="TZLibModeType">
    <value>
      Data
    </value>
  </const>
  <const name="Compress" type="TZLibOperationType">
    <value>
      Compress
    </value>
  </const>
  <const name="Decompress" type="TZLibOperationType">
    <value>
      Decompress
    </value>
  </const>
  <const name="Deflate" type="TZLibAlgorithmType">
    <value>
      Deflate
    </value>
  </const>
  <const name="GZip" type="TZLibAlgorithmType">
    <value>
      GZip
    </value>
  </const>
  <enum name="TZLibCompressionLevelType">
    <element value="0" name="None" />
    <element value="1" name="Fastest" />
    <element value="2" name="Default" />
    <element value="3" name="Max" />
  </enum>
  <enum name="TZLibModeType">
    <element value="0" name="Base64" />
    <element value="1" name="Data" />
  </enum>
  <enum name="TZLibOperationType">
    <element value="0" name="Compress" />
    <element value="1" name="Decompress" />
  </enum>
  <enum name="TZLibAlgorithmType">
    <element value="0" name="Deflate" />
    <element value="1" name="GZip" />
  </enum>
  <interface name="IZLibResult" GUID="{067C347C-1F21-421F-9507-8E358E23B4D3}" ancestor="IInterface">
    <function name="GetMode" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="TZLibModeType" />
      </parameters>
    </function>
    <function name="GetOperation" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="TZLibOperationType" />
      </parameters>
    </function>
    <function name="GetAlgorithm" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="TZLibAlgorithmType" />
      </parameters>
    </function>
    <function name="GetMD5Input" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="string" />
      </parameters>
    </function>
    <function name="GetMD5Result" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="string" />
      </parameters>
    </function>
    <function name="GetText" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="Value" type="TEncoding" paramflags="const" />
        <retval type="string" />
      </parameters>
    </function>
    <function name="GetTextUTF8" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="string" />
      </parameters>
    </function>
    <function name="GetStream" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="TStream" />
      </parameters>
    </function>
    <procedure name="SaveToFile" visibility="public" procflags="abstract virtual">
      <devnotes>
         <summary>
         Salva o resultado do processo de compressão e descompressão em arquivo.
         <code>
         var
           lResult: IZLibResult;
         begin
           Exemplo: TZLib.Base64.Compress.Deflate.Text('Texto12345', lResult);
           lResult.SaveToFile('C:\Result.txt');
         end;
         </code>
         </summary>
      </devnotes>
      <parameters>
        <parameter name="FileName" type="TFileName" paramflags="const" />
      </parameters>
    </procedure>
    <property name="Mode" visibility="public" read="GetMode" type="TZLibModeType">
      <devnotes>
         <summary>
         Identifica o tipo de formato utilizado no processo de compressão e descompressão.
         </summary>
         <remarks>
         <para>* Verificar na unit ZLibFramework.Types o tipo TZLibModeType os valores disponíveis.</para>
         </remarks>
      </devnotes>
    </property>
    <property name="Operation" visibility="public" read="GetOperation" type="TZLibOperationType">
      <devnotes>
         <summary>
         Identifica a operação utilizada no processo de compressão e descompressão.
         </summary>
         <remarks>
         <para>* Verificar na unit ZLibFramework.Types o tipo TZLibOperationType os valores disponíveis.</para>
         </remarks>
      </devnotes>
    </property>
    <property name="Algorithm" visibility="public" read="GetAlgorithm" type="TZLibAlgorithmType">
      <devnotes>
         <summary>
         Identifica o algoritimo utilizado no processo de compressão e descompressão.
         </summary>
         <remarks>
         <para>* Verificar na unit ZLibFramework.Types o tipo TZLibAlgorithmType os valores disponíveis.</para>
         </remarks>
      </devnotes>
    </property>
    <property name="Text[const Encoding]" visibility="public" read="GetText" type="string">
      <devnotes>
         <summary>
         Texto contendo o resultado do processo de compressão e descompressão.
         <code>
         var
           lResult: IZLibResult;
         begin
           Exemplo: TZLib.Base64.Compress.Deflate.Text('Texto12345', lResult);
           lblResult.Text := lResult.Text[TEncoding.UTF8];
         end;
         </code>
         </summary>
         <remarks>
         <para>* O conteúdo do texto pode ser codificado usando um determinado Encoding.</para>
         <para>* O Encoding utilizado quando não informado, é UTF8.</para>
         </remarks>
      </devnotes>
    </property>
    <property name="TextUTF8" visibility="public" read="GetTextUTF8" type="string" default="0">
      <devnotes>
         <summary>
         Texto contendo o resultado do processo de compressão e descompressão.
         <code>
         var
           lResult: IZLibResult;
         begin
           Exemplo: TZLib.Base64.Compress.Deflate.Text('Texto12345', lResult);
           lblResult.Text := lResult.TextUTF8;
         end;
         </code>
         </summary>
         <remarks>
         <para>* Conteúdo do texto codificado usando o Encoding UTF8.</para>
         </remarks>
      </devnotes>
    </property>
    <property name="Stream" visibility="public" read="GetStream" type="TStream">
      <devnotes>
         <summary>
         Stream contendo o resultado do processo de compressão e descompressão.
         </summary>
      </devnotes>
    </property>
    <property name="MD5Input" visibility="public" read="GetMD5Input" type="string" default="0">
      <devnotes>
         <summary>
         MD5 do parâmetro de entrada utilizado no processo de compressão e descompressão.
         </summary>
      </devnotes>
    </property>
    <property name="MD5Result" visibility="public" read="GetMD5Result" type="string" default="0">
      <devnotes>
         <summary>
         MD5 do resultado do processo de compressão e descompressão.
         </summary>
      </devnotes>
    </property>
  </interface>
  <class name="EZLibException">
    <ancestor name="Exception" namespace="System.SysUtils">
      <methodref name="Create@" visibility="class private" procflags="class constructor noself">
      </methodref>
      <methodref name="Destroy@" visibility="class private" procflags="class destructor noself">
      </methodref>
      <methodref name="SetInnerException" visibility="protected">
      </methodref>
      <methodref name="SetStackInfo" visibility="protected">
      </methodref>
      <methodref name="GetStackTrace" visibility="protected">
      </methodref>
      <methodref name="RaisingException" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="CreateFmt" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="CreateRes" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateRes" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateResFmt" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateResFmt" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateHelp" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="CreateFmtHelp" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="CreateResHelp" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateResHelp" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateResFmtHelp" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateResFmtHelp" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <methodref name="GetBaseException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="override">
      </methodref>
      <propertyref name="BaseException" visibility="public">
      </propertyref>
      <propertyref name="HelpContext" visibility="public">
      </propertyref>
      <propertyref name="InnerException" visibility="public">
      </propertyref>
      <propertyref name="Message" visibility="public">
      </propertyref>
      <propertyref name="StackTrace" visibility="public">
      </propertyref>
      <propertyref name="StackInfo" visibility="public">
      </propertyref>
      <methodref name="RaiseOuterException" visibility="public" procflags="static">
      </methodref>
      <methodref name="ThrowOuterException" visibility="public" procflags="static">
      </methodref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="DisposeOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InitInstance" visibility="public" procflags="class">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassNameIs" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassParent" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassInfo" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InstanceSize" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InheritsFrom" visibility="public" procflags="class">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodName" visibility="public" procflags="class">
        </methodref>
        <methodref name="QualifiedClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="UnitName" visibility="public" procflags="class">
        </methodref>
        <methodref name="UnitScope" visibility="public" procflags="class">
        </methodref>
        <methodref name="Equals" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetHashCode" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ToString" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Dispatch" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="DefaultHandler" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class virtual">
        </methodref>
        <methodref name="FreeInstance" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor virtual">
        </methodref>
        <methodref name="CPP_ABI_1" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="CPP_ABI_2" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="CPP_ABI_3" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetDisposed" visibility="protected" procflags="inline">
        </methodref>
        <methodref name="CheckDisposed" visibility="protected" procflags="inline">
        </methodref>
        <propertyref name="Disposed" visibility="protected">
        </propertyref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FMode" type="TZLibModeType" visibility="private" size="1" offset="48" />
      <field name="FOperation" type="TZLibOperationType" visibility="private" size="1" offset="49" />
      <field name="FAlgorithm" type="TZLibAlgorithmType" visibility="private" size="1" offset="50" />
      <field name="FHint" type="string" visibility="private" size="8" offset="56" />
      <field name="FEncodingFail" type="Boolean" visibility="private" size="1" offset="64" />
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="pMode" type="TZLibModeType" paramflags="const" />
          <parameter name="pOperation" type="TZLibOperationType" paramflags="const" />
          <parameter name="pAlgorithm" type="TZLibAlgorithmType" paramflags="const" />
          <parameter name="pMessage" type="string" paramflags="const" />
          <parameter name="pHint" type="string" paramflags="const" />
          <parameter name="pEncodingFail" type="Boolean" paramflags="const">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      </constructor>
      <function name="ToString" visibility="public" procflags="override">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <property name="Mode" visibility="public" read="FMode" type="TZLibModeType" />
      <property name="Operation" visibility="public" read="FOperation" type="TZLibOperationType" />
      <property name="Algorithm" visibility="public" read="FAlgorithm" type="TZLibAlgorithmType" />
      <property name="Hint" visibility="public" read="FHint" type="string" default="0" />
      <property name="EncodingFail" visibility="public" read="FEncodingFail" type="Boolean" />
    </members>
  </class>
  <class name="TZLibResult">
    <ancestor name="TInterfacedObject" namespace="System">
      <interfaces>
        <implements name="IInterface" />
      </interfaces>
      <methodref name="GetRefCount" visibility="private" procflags="inline">
      </methodref>
      <methodref name="__MarkDestroying" visibility="protected" procflags="static inline">
      </methodref>
      <methodref name="QueryInterface" visibility="protected">
      </methodref>
      <methodref name="_AddRef" visibility="protected">
      </methodref>
      <methodref name="_Release" visibility="protected">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="override">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="override">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class override">
      </methodref>
      <propertyref name="RefCount" visibility="public">
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="DisposeOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InitInstance" visibility="public" procflags="class">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassNameIs" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassParent" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassInfo" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InstanceSize" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InheritsFrom" visibility="public" procflags="class">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodName" visibility="public" procflags="class">
        </methodref>
        <methodref name="QualifiedClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="UnitName" visibility="public" procflags="class">
        </methodref>
        <methodref name="UnitScope" visibility="public" procflags="class">
        </methodref>
        <methodref name="Equals" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetHashCode" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ToString" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Dispatch" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="DefaultHandler" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class virtual">
        </methodref>
        <methodref name="FreeInstance" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor virtual">
        </methodref>
        <methodref name="CPP_ABI_1" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="CPP_ABI_2" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="CPP_ABI_3" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetDisposed" visibility="protected" procflags="inline">
        </methodref>
        <methodref name="CheckDisposed" visibility="protected" procflags="inline">
        </methodref>
        <propertyref name="Disposed" visibility="protected">
        </propertyref>
      </ancestor>
    </ancestor>
    <interfaces>
      <implements name="IZLibResult" />
    </interfaces>
    <members>
      <field name="FOperation" type="TZLibOperationType" visibility="class private" size="1" offset="24" />
      <field name="FMode" type="TZLibModeType" visibility="class private" size="1" offset="25" />
      <field name="FAlgorithm" type="TZLibAlgorithmType" visibility="class private" size="1" offset="26" />
      <field name="FStream" type="TBytesStream" visibility="class private" size="8" offset="32" />
      <field name="FMD5Input" type="string" visibility="class private" size="8" offset="40" />
      <field name="FMD5Result" type="string" visibility="class private" size="8" offset="48" />
      <function name="GetMode" visibility="class private">
        <parameters>
          <retval type="TZLibModeType" />
        </parameters>
      </function>
      <function name="GetOperation" visibility="class private">
        <parameters>
          <retval type="TZLibOperationType" />
        </parameters>
      </function>
      <function name="GetAlgorithm" visibility="class private">
        <parameters>
          <retval type="TZLibAlgorithmType" />
        </parameters>
      </function>
      <function name="GetMD5Input" visibility="class private">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <function name="GetMD5Result" visibility="class private">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <function name="GetText" visibility="class private">
        <parameters>
          <parameter name="pValue" type="TEncoding" paramflags="const" />
          <retval type="string" />
        </parameters>
      </function>
      <function name="GetTextUTF8" visibility="class private">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <function name="GetStream" visibility="class private">
        <parameters>
          <retval type="TStream" />
        </parameters>
      </function>
      <procedure name="SaveToFile" visibility="class private">
        <parameters>
          <parameter name="pFileName" type="TFileName" paramflags="const" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="pOperation" type="TZLibOperationType" paramflags="const" />
          <parameter name="pMode" type="TZLibModeType" paramflags="const" />
          <parameter name="pAlgorithm" type="TZLibAlgorithmType" paramflags="const" />
          <parameter name="pBytes" type="TBytes" paramflags="const" />
          <parameter name="pMD5Input" type="string" paramflags="const" />
          <parameter name="pMD5Result" type="string" paramflags="const" />
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <parameters>
        </parameters>
      </destructor>
    </members>
  </class>
  <helper name="TZLibCompressionLevelTypeHelper" for="TZLibCompressionLevelType">
    <members>
      <function name="GetAsString" visibility="class private" procflags="helper">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <function name="GetZCompressionLevel" visibility="class private" procflags="helper">
        <parameters>
          <retval type="TZCompressionLevel" />
        </parameters>
      </function>
      <property name="ZCompressionLevel" visibility="public" read="GetZCompressionLevel" type="TZCompressionLevel" />
      <property name="AsString" visibility="public" read="GetAsString" type="string" default="0" />
    </members>
  </helper>
  <helper name="TZLibAlgorithmTypeHelper" for="TZLibAlgorithmType">
    <members>
      <function name="GetWindowBits" visibility="class private" procflags="helper">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="GetAsString" visibility="class private" procflags="helper">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <property name="WindowBits" visibility="public" read="GetWindowBits" type="Integer" />
      <property name="AsString" visibility="public" read="GetAsString" type="string" default="0" />
    </members>
  </helper>
  <helper name="TZLibOperationTypeHelper" for="TZLibOperationType">
    <members>
      <function name="GetAsString" visibility="class private" procflags="helper">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <property name="AsString" visibility="public" read="GetAsString" type="string" default="0" />
    </members>
  </helper>
  <helper name="TZLibModeTypeHelper" for="TZLibModeType">
    <members>
      <function name="GetAsString" visibility="class private" procflags="helper">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <property name="AsString" visibility="public" read="GetAsString" type="string" default="0" />
    </members>
  </helper>
  <const name="sEZDecompressionErrorHint" type="string" resourcestring="true">
    <value>
      Verificar se o valor passado no parâmetro para ser descompactado foi compactado utilizando o algoritimo &quot;%%s&quot;.
    </value>
  </const>
</namespace>
